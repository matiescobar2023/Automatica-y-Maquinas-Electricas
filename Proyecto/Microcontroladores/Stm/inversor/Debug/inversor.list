
inversor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d0  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ebc  08005ebc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ebc  08005ebc  00006ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec4  08005ec4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ec8  08005ec8  00006ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005ecc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08005ed8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08005ed8  00007104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd4f  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  00016d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00018f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4a  00000000  00000000  00019dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002635a  00000000  00000000  0001a91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b8c  00000000  00000000  00040c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eea35  00000000  00000000  00052800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141235  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c38  00000000  00000000  00141278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00144eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ad4 	.word	0x08004ad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ad4 	.word	0x08004ad4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000580 <MX_GPIO_Init+0xc8>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000580 <MX_GPIO_Init+0xc8>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004da:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <MX_GPIO_Init+0xc8>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	4b26      	ldr	r3, [pc, #152]	@ (8000580 <MX_GPIO_Init+0xc8>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a25      	ldr	r2, [pc, #148]	@ (8000580 <MX_GPIO_Init+0xc8>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f2:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <MX_GPIO_Init+0xc8>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <MX_GPIO_Init+0xc8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a1f      	ldr	r2, [pc, #124]	@ (8000580 <MX_GPIO_Init+0xc8>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b1d      	ldr	r3, [pc, #116]	@ (8000580 <MX_GPIO_Init+0xc8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <MX_GPIO_Init+0xc8>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a19      	ldr	r2, [pc, #100]	@ (8000580 <MX_GPIO_Init+0xc8>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <MX_GPIO_Init+0xc8>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|UEV_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 8000534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000538:	f000 fea4 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800053c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000542:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4619      	mov	r1, r3
 8000552:	480c      	ldr	r0, [pc, #48]	@ (8000584 <MX_GPIO_Init+0xcc>)
 8000554:	f000 fcec 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin UEV_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|UEV_Pin;
 8000558:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000574:	f000 fcdc 	bl	8000f30 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	@ 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000800 	.word	0x48000800

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fb42 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f826 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f7ff ff90 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 fa86 	bl	8000aa8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800059c:	f000 f940 	bl	8000820 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005a0:	2100      	movs	r1, #0
 80005a2:	480e      	ldr	r0, [pc, #56]	@ (80005dc <main+0x54>)
 80005a4:	f002 faea 	bl	8002b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005a8:	2104      	movs	r1, #4
 80005aa:	480c      	ldr	r0, [pc, #48]	@ (80005dc <main+0x54>)
 80005ac:	f002 fae6 	bl	8002b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005b0:	2108      	movs	r1, #8
 80005b2:	480a      	ldr	r0, [pc, #40]	@ (80005dc <main+0x54>)
 80005b4:	f002 fae2 	bl	8002b7c <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4808      	ldr	r0, [pc, #32]	@ (80005dc <main+0x54>)
 80005bc:	f003 fb38 	bl	8003c30 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80005c0:	2104      	movs	r1, #4
 80005c2:	4806      	ldr	r0, [pc, #24]	@ (80005dc <main+0x54>)
 80005c4:	f003 fb34 	bl	8003c30 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80005c8:	2108      	movs	r1, #8
 80005ca:	4804      	ldr	r0, [pc, #16]	@ (80005dc <main+0x54>)
 80005cc:	f003 fb30 	bl	8003c30 <HAL_TIMEx_PWMN_Start>


  HAL_TIM_Base_Start_IT(&htim1);
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <main+0x54>)
 80005d2:	f002 fa01 	bl	80029d8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0x4e>
 80005da:	bf00      	nop
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	@ 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fa43 	bl	8004a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000606:	f000 fe7d 	bl	8001304 <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 f837 	bl	8000682 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062e:	230a      	movs	r3, #10
 8000630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4618      	mov	r0, r3
 8000644:	f000 feb4 	bl	80013b0 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064e:	f000 f818 	bl	8000682 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fa7c 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 f804 	bl	8000682 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	@ 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000686:	b672      	cpsid	i
}
 8000688:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_MspInit+0x44>)
 8000698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_MspInit+0x44>)
 80006a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <HAL_MspInit+0x44>)
 80006b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b2:	4a08      	ldr	r2, [pc, #32]	@ (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <HAL_MspInit+0x44>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <NMI_Handler+0x4>

080006e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <MemManage_Handler+0x4>

080006f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <UsageFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072e:	f000 facd 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800073c:	482a      	ldr	r0, [pc, #168]	@ (80007e8 <TIM1_UP_TIM16_IRQHandler+0xb0>)
 800073e:	f002 fb23 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  // Actualiza los valores de PWM con la LUT y los desfases
  if (!(TIM1->CR1 & TIM_CR1_DIR)){
 8000742:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <TIM1_UP_TIM16_IRQHandler+0xb4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	2b00      	cmp	r3, #0
 800074c:	d14a      	bne.n	80007e4 <TIM1_UP_TIM16_IRQHandler+0xac>
	  TIM1->CCR1 = lut[pos];
 800074e:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <TIM1_UP_TIM16_IRQHandler+0xb8>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	b29b      	uxth	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <TIM1_UP_TIM16_IRQHandler+0xbc>)
 8000758:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800075c:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <TIM1_UP_TIM16_IRQHandler+0xb4>)
 800075e:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = lut[(pos + LUT_SIZE/3) % LUT_SIZE];
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <TIM1_UP_TIM16_IRQHandler+0xb8>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	f203 3241 	addw	r2, r3, #833	@ 0x341
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <TIM1_UP_TIM16_IRQHandler+0xc0>)
 800076c:	fb83 1302 	smull	r1, r3, r3, r2
 8000770:	1299      	asrs	r1, r3, #10
 8000772:	17d3      	asrs	r3, r2, #31
 8000774:	1acb      	subs	r3, r1, r3
 8000776:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800077a:	fb01 f303 	mul.w	r3, r1, r3
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <TIM1_UP_TIM16_IRQHandler+0xbc>)
 8000782:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <TIM1_UP_TIM16_IRQHandler+0xb4>)
 8000788:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM1->CCR3 = lut[(pos + 2*LUT_SIZE/3) % LUT_SIZE];
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <TIM1_UP_TIM16_IRQHandler+0xb8>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	f203 6282 	addw	r2, r3, #1666	@ 0x682
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <TIM1_UP_TIM16_IRQHandler+0xc0>)
 8000796:	fb83 1302 	smull	r1, r3, r3, r2
 800079a:	1299      	asrs	r1, r3, #10
 800079c:	17d3      	asrs	r3, r2, #31
 800079e:	1acb      	subs	r3, r1, r3
 80007a0:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80007a4:	fb01 f303 	mul.w	r3, r1, r3
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <TIM1_UP_TIM16_IRQHandler+0xbc>)
 80007ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <TIM1_UP_TIM16_IRQHandler+0xb4>)
 80007b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	  HAL_GPIO_TogglePin(GPIOA, UEV_Pin);
 80007b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007bc:	f000 fd7a 	bl	80012b4 <HAL_GPIO_TogglePin>
	  // Incrementa posición y vuelve a 0 si alcanza el final de la LUT
	  pos = (pos + 1) % LUT_SIZE;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <TIM1_UP_TIM16_IRQHandler+0xb8>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <TIM1_UP_TIM16_IRQHandler+0xc0>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	1291      	asrs	r1, r2, #10
 80007d0:	17da      	asrs	r2, r3, #31
 80007d2:	1a8a      	subs	r2, r1, r2
 80007d4:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80007d8:	fb01 f202 	mul.w	r2, r1, r2
 80007dc:	1a9a      	subs	r2, r3, r2
 80007de:	b292      	uxth	r2, r2
 80007e0:	4b03      	ldr	r3, [pc, #12]	@ (80007f0 <TIM1_UP_TIM16_IRQHandler+0xb8>)
 80007e2:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000002c 	.word	0x2000002c
 80007ec:	40012c00 	.word	0x40012c00
 80007f0:	20000028 	.word	0x20000028
 80007f4:	08004aec 	.word	0x08004aec
 80007f8:	68db8bad 	.word	0x68db8bad

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	@ (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09a      	sub	sp, #104	@ 0x68
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000840:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	222c      	movs	r2, #44	@ 0x2c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f004 f90d 	bl	8004a7a <memset>
  //sConfigOC.Pulse = lut[0];
  //sConfigOC.Pulse = lut[6666];
  //sConfigOC.Pulse = lut[13332];

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000860:	4b51      	ldr	r3, [pc, #324]	@ (80009a8 <MX_TIM1_Init+0x188>)
 8000862:	4a52      	ldr	r2, [pc, #328]	@ (80009ac <MX_TIM1_Init+0x18c>)
 8000864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8000866:	4b50      	ldr	r3, [pc, #320]	@ (80009a8 <MX_TIM1_Init+0x188>)
 8000868:	2213      	movs	r2, #19
 800086a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800086c:	4b4e      	ldr	r3, [pc, #312]	@ (80009a8 <MX_TIM1_Init+0x188>)
 800086e:	2220      	movs	r2, #32
 8000870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000872:	4b4d      	ldr	r3, [pc, #308]	@ (80009a8 <MX_TIM1_Init+0x188>)
 8000874:	22c8      	movs	r2, #200	@ 0xc8
 8000876:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b4b      	ldr	r3, [pc, #300]	@ (80009a8 <MX_TIM1_Init+0x188>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087e:	4b4a      	ldr	r3, [pc, #296]	@ (80009a8 <MX_TIM1_Init+0x188>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000884:	4b48      	ldr	r3, [pc, #288]	@ (80009a8 <MX_TIM1_Init+0x188>)
 8000886:	2280      	movs	r2, #128	@ 0x80
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088a:	4847      	ldr	r0, [pc, #284]	@ (80009a8 <MX_TIM1_Init+0x188>)
 800088c:	f002 f84c 	bl	8002928 <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000896:	f7ff fef4 	bl	8000682 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008a4:	4619      	mov	r1, r3
 80008a6:	4840      	ldr	r0, [pc, #256]	@ (80009a8 <MX_TIM1_Init+0x188>)
 80008a8:	f002 fc8a 	bl	80031c0 <HAL_TIM_ConfigClockSource>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008b2:	f7ff fee6 	bl	8000682 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b6:	483c      	ldr	r0, [pc, #240]	@ (80009a8 <MX_TIM1_Init+0x188>)
 80008b8:	f002 f8fe 	bl	8002ab8 <HAL_TIM_PWM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008c2:	f7ff fede 	bl	8000682 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008d6:	4619      	mov	r1, r3
 80008d8:	4833      	ldr	r0, [pc, #204]	@ (80009a8 <MX_TIM1_Init+0x188>)
 80008da:	f003 fa63 	bl	8003da4 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008e4:	f7ff fecd 	bl	8000682 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e8:	2360      	movs	r3, #96	@ 0x60
 80008ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = lut[0];
 80008ec:	2364      	movs	r3, #100	@ 0x64
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80008f4:	2308      	movs	r3, #8
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4826      	ldr	r0, [pc, #152]	@ (80009a8 <MX_TIM1_Init+0x188>)
 800090e:	f002 fb43 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000918:	f7ff feb3 	bl	8000682 <Error_Handler>
  }
  sConfigOC.Pulse = lut[LUT_SIZE/3];
 800091c:	23ba      	movs	r3, #186	@ 0xba
 800091e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000920:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000924:	2204      	movs	r2, #4
 8000926:	4619      	mov	r1, r3
 8000928:	481f      	ldr	r0, [pc, #124]	@ (80009a8 <MX_TIM1_Init+0x188>)
 800092a:	f002 fb35 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000934:	f7ff fea5 	bl	8000682 <Error_Handler>
  }
  sConfigOC.Pulse = lut[LUT_SIZE*2/3];
 8000938:	230d      	movs	r3, #13
 800093a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800093c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000940:	2208      	movs	r2, #8
 8000942:	4619      	mov	r1, r3
 8000944:	4818      	ldr	r0, [pc, #96]	@ (80009a8 <MX_TIM1_Init+0x188>)
 8000946:	f002 fb27 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8000950:	f7ff fe97 	bl	8000682 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000960:	23c8      	movs	r3, #200	@ 0xc8
 8000962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	@ (80009a8 <MX_TIM1_Init+0x188>)
 800098a:	f003 fa93 	bl	8003eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8000994:	f7ff fe75 	bl	8000682 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <MX_TIM1_Init+0x188>)
 800099a:	f000 f82f 	bl	80009fc <HAL_TIM_MspPostInit>

}
 800099e:	bf00      	nop
 80009a0:	3768      	adds	r7, #104	@ 0x68
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000002c 	.word	0x2000002c
 80009ac:	40012c00 	.word	0x40012c00

080009b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <HAL_TIM_Base_MspInit+0x44>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d113      	bne.n	80009ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_TIM_Base_MspInit+0x48>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c6:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <HAL_TIM_Base_MspInit+0x48>)
 80009c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_TIM_Base_MspInit+0x48>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2019      	movs	r0, #25
 80009e0:	f000 fa6f 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009e4:	2019      	movs	r0, #25
 80009e6:	f000 fa88 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <HAL_TIM_MspPostInit+0xa0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d139      	bne.n	8000a92 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_TIM_MspPostInit+0xa4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa0 <HAL_TIM_MspPostInit+0xa4>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <HAL_TIM_MspPostInit+0xa4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <HAL_TIM_MspPostInit+0xa4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4a19      	ldr	r2, [pc, #100]	@ (8000aa0 <HAL_TIM_MspPostInit+0xa4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_TIM_MspPostInit+0xa4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1N_Pin|L1_Pin|L2_Pin|L3_Pin;
 8000a4e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f000 fa5f 	bl	8000f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L2N_Pin|L3N_Pin;
 8000a72:	2303      	movs	r3, #3
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_TIM_MspPostInit+0xa8>)
 8000a8e:	f000 fa4f 	bl	8000f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	@ 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000400 	.word	0x48000400

08000aa8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	@ (8000b04 <MX_USART2_UART_Init+0x5c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aec:	f003 faa3 	bl	8004036 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000af6:	f7ff fdc4 	bl	8000682 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000078 	.word	0x20000078
 8000b04:	40004400 	.word	0x40004400

08000b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2288      	movs	r2, #136	@ 0x88
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 ffa6 	bl	8004a7a <memset>
  if(uartHandle->Instance==USART2)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <HAL_UART_MspInit+0xb0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d13b      	bne.n	8000bb0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fa33 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff fd97 	bl	8000682 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b58:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b78:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b84:	230c      	movs	r3, #12
 8000b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f000 f9c0 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	37b0      	adds	r7, #176	@ 0xb0
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff fe1a 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 ff4d 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fcc9 	bl	8000588 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c04:	08005ecc 	.word	0x08005ecc
  ldr r2, =_sbss
 8000c08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c0c:	20000104 	.word	0x20000104

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_Init+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <HAL_Init+0x3c>)
 8000c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 f93e 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f000 f80f 	bl	8000c54 <HAL_InitTick>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	e001      	b.n	8000c46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c42:	f7ff fd25 	bl	8000690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d023      	beq.n	8000cb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_InitTick+0x70>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f949 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10f      	bne.n	8000caa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d809      	bhi.n	8000ca4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f913 	bl	8000ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_InitTick+0x74>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e004      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e001      	b.n	8000cb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000100 	.word	0x20000100

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000100 	.word	0x20000100

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	@ (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	@ (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	@ 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff29 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff3e 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff31 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e17f      	b.n	8001240 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8171 	beq.w	800123a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x40>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d118      	bne.n	8001010 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b03      	cmp	r3, #3
 800101a:	d017      	beq.n	800104c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d123      	bne.n	80010a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	6939      	ldr	r1, [r7, #16]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0203 	and.w	r2, r3, #3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80ac 	beq.w	800123a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001260 <HAL_GPIO_Init+0x330>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001260 <HAL_GPIO_Init+0x330>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001260 <HAL_GPIO_Init+0x330>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x242>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	@ (8001268 <HAL_GPIO_Init+0x338>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x23e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	@ (800126c <HAL_GPIO_Init+0x33c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x23a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	@ (8001270 <HAL_GPIO_Init+0x340>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x236>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	@ (8001274 <HAL_GPIO_Init+0x344>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x232>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	@ (8001278 <HAL_GPIO_Init+0x348>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x22e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	@ (800127c <HAL_GPIO_Init+0x34c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x22a>
 8001156:	2306      	movs	r3, #6
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800115a:	2307      	movs	r3, #7
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x244>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x244>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x244>
 8001172:	2300      	movs	r3, #0
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001184:	4937      	ldr	r1, [pc, #220]	@ (8001264 <HAL_GPIO_Init+0x334>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001192:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <HAL_GPIO_Init+0x350>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b6:	4a32      	ldr	r2, [pc, #200]	@ (8001280 <HAL_GPIO_Init+0x350>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011bc:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <HAL_GPIO_Init+0x350>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e0:	4a27      	ldr	r2, [pc, #156]	@ (8001280 <HAL_GPIO_Init+0x350>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_GPIO_Init+0x350>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <HAL_GPIO_Init+0x350>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_GPIO_Init+0x350>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <HAL_GPIO_Init+0x350>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	f47f ae78 	bne.w	8000f40 <HAL_GPIO_Init+0x10>
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48001000 	.word	0x48001000
 8001278:	48001400 	.word	0x48001400
 800127c:	48001800 	.word	0x48001800
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43d9      	mvns	r1, r3
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	400b      	ands	r3, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <HAL_PWREx_GetVoltageRange+0x18>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40007000 	.word	0x40007000

08001304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001312:	d130      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001314:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800131c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001320:	d038      	beq.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2232      	movs	r2, #50	@ 0x32
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001348:	e002      	b.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3b01      	subs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135c:	d102      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f2      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001370:	d110      	bne.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e00f      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001376:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001382:	d007      	beq.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800138c:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001392:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40007000 	.word	0x40007000
 80013a8:	20000000 	.word	0x20000000
 80013ac:	431bde83 	.word	0x431bde83

080013b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e3ca      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c2:	4b97      	ldr	r3, [pc, #604]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013cc:	4b94      	ldr	r3, [pc, #592]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80e4 	beq.w	80015ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_RCC_OscConfig+0x4a>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	f040 808b 	bne.w	8001508 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 8087 	bne.w	8001508 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fa:	4b89      	ldr	r3, [pc, #548]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x62>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e3a2      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4b82      	ldr	r3, [pc, #520]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d004      	beq.n	800142c <HAL_RCC_OscConfig+0x7c>
 8001422:	4b7f      	ldr	r3, [pc, #508]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800142a:	e005      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
 800142c:	4b7c      	ldr	r3, [pc, #496]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001438:	4293      	cmp	r3, r2
 800143a:	d223      	bcs.n	8001484 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fd55 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e383      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001450:	4b73      	ldr	r3, [pc, #460]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a72      	ldr	r2, [pc, #456]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b70      	ldr	r3, [pc, #448]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	496d      	ldr	r1, [pc, #436]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146e:	4b6c      	ldr	r3, [pc, #432]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4968      	ldr	r1, [pc, #416]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
 8001482:	e025      	b.n	80014d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001484:	4b66      	ldr	r3, [pc, #408]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a65      	ldr	r2, [pc, #404]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b63      	ldr	r3, [pc, #396]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4960      	ldr	r1, [pc, #384]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	495b      	ldr	r1, [pc, #364]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fd15 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e343      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d0:	f000 fc4a 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b52      	ldr	r3, [pc, #328]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	4950      	ldr	r1, [pc, #320]	@ (8001624 <HAL_RCC_OscConfig+0x274>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001628 <HAL_RCC_OscConfig+0x278>)
 80014ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f0:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fbad 	bl	8000c54 <HAL_InitTick>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d052      	beq.n	80015aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	e327      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d032      	beq.n	8001576 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001510:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a42      	ldr	r2, [pc, #264]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151c:	f7ff fbea 	bl	8000cf4 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001524:	f7ff fbe6 	bl	8000cf4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e310      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001536:	4b3a      	ldr	r3, [pc, #232]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001542:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4931      	ldr	r1, [pc, #196]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001560:	4b2f      	ldr	r3, [pc, #188]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	492c      	ldr	r1, [pc, #176]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e01a      	b.n	80015ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a29      	ldr	r2, [pc, #164]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001582:	f7ff fbb7 	bl	8000cf4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158a:	f7ff fbb3 	bl	8000cf4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e2dd      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x1da>
 80015a8:	e000      	b.n	80015ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d074      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x21a>
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d10e      	bne.n	80015e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d10b      	bne.n	80015e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d064      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d160      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e2ba      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x24a>
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e026      	b.n	8001648 <HAL_RCC_OscConfig+0x298>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001602:	d115      	bne.n	8001630 <HAL_RCC_OscConfig+0x280>
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800160a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a02      	ldr	r2, [pc, #8]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x298>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	08005e74 	.word	0x08005e74
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004
 8001630:	4ba0      	ldr	r3, [pc, #640]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a9f      	ldr	r2, [pc, #636]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b9d      	ldr	r3, [pc, #628]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a9c      	ldr	r2, [pc, #624]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb50 	bl	8000cf4 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fb4c 	bl	8000cf4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	@ 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e276      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166a:	4b92      	ldr	r3, [pc, #584]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x2a8>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fb3c 	bl	8000cf4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fb38 	bl	8000cf4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	@ 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e262      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001692:	4b88      	ldr	r3, [pc, #544]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x2d0>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d060      	beq.n	8001770 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x310>
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d116      	bne.n	80016ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	4b7c      	ldr	r3, [pc, #496]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x328>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e23f      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b76      	ldr	r3, [pc, #472]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	4973      	ldr	r1, [pc, #460]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	e040      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d023      	beq.n	800173e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f6:	4b6f      	ldr	r3, [pc, #444]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6e      	ldr	r2, [pc, #440]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff faf7 	bl	8000cf4 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff faf3 	bl	8000cf4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e21d      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	4b65      	ldr	r3, [pc, #404]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b62      	ldr	r3, [pc, #392]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	495f      	ldr	r1, [pc, #380]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
 800173c:	e018      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b5d      	ldr	r3, [pc, #372]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5c      	ldr	r2, [pc, #368]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fad3 	bl	8000cf4 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff facf 	bl	8000cf4 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1f9      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001764:	4b53      	ldr	r3, [pc, #332]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01c      	beq.n	80017be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001784:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178a:	4a4a      	ldr	r2, [pc, #296]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff faae 	bl	8000cf4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff faaa 	bl	8000cf4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1d4      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ef      	beq.n	800179c <HAL_RCC_OscConfig+0x3ec>
 80017bc:	e01b      	b.n	80017f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c4:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fa91 	bl	8000cf4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fa8d 	bl	8000cf4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1b7      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e8:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ef      	bne.n	80017d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a6 	beq.w	8001950 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001808:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10d      	bne.n	8001830 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001818:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182c:	2301      	movs	r3, #1
 800182e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d118      	bne.n	800186e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001848:	f7ff fa54 	bl	8000cf4 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7ff fa50 	bl	8000cf4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e17a      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x4d8>
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001886:	e029      	b.n	80018dc <HAL_RCC_OscConfig+0x52c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d115      	bne.n	80018bc <HAL_RCC_OscConfig+0x50c>
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a6:	4a03      	ldr	r2, [pc, #12]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b0:	e014      	b.n	80018dc <HAL_RCC_OscConfig+0x52c>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40007000 	.word	0x40007000
 80018bc:	4b9c      	ldr	r3, [pc, #624]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c2:	4a9b      	ldr	r2, [pc, #620]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018cc:	4b98      	ldr	r3, [pc, #608]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d2:	4a97      	ldr	r2, [pc, #604]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d016      	beq.n	8001912 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fa06 	bl	8000cf4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fa02 	bl	8000cf4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e12a      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	4b8b      	ldr	r3, [pc, #556]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ed      	beq.n	80018ec <HAL_RCC_OscConfig+0x53c>
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f9ef 	bl	8000cf4 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff f9eb 	bl	8000cf4 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e113      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	4b7f      	ldr	r3, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ed      	bne.n	800191a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b7a      	ldr	r3, [pc, #488]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	4a79      	ldr	r2, [pc, #484]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 800194a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80fe 	beq.w	8001b56 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	2b02      	cmp	r3, #2
 8001960:	f040 80d0 	bne.w	8001b04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001964:	4b72      	ldr	r3, [pc, #456]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	429a      	cmp	r2, r3
 8001976:	d130      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	3b01      	subs	r3, #1
 8001984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d127      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001994:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d11f      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a4:	2a07      	cmp	r2, #7
 80019a6:	bf14      	ite	ne
 80019a8:	2201      	movne	r2, #1
 80019aa:	2200      	moveq	r2, #0
 80019ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d113      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019bc:	085b      	lsrs	r3, r3, #1
 80019be:	3b01      	subs	r3, #1
 80019c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d109      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d06e      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b0c      	cmp	r3, #12
 80019de:	d069      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019ec:	4b50      	ldr	r3, [pc, #320]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0ad      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4b      	ldr	r2, [pc, #300]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a08:	f7ff f974 	bl	8000cf4 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f970 	bl	8000cf4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e09a      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a22:	4b43      	ldr	r3, [pc, #268]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	4b40      	ldr	r3, [pc, #256]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b40      	ldr	r3, [pc, #256]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a3e:	3a01      	subs	r2, #1
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a48:	0212      	lsls	r2, r2, #8
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a50:	0852      	lsrs	r2, r2, #1
 8001a52:	3a01      	subs	r2, #1
 8001a54:	0552      	lsls	r2, r2, #21
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a5c:	0852      	lsrs	r2, r2, #1
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	0652      	lsls	r2, r2, #25
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a68:	0912      	lsrs	r2, r2, #4
 8001a6a:	0452      	lsls	r2, r2, #17
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	4930      	ldr	r1, [pc, #192]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a74:	4b2e      	ldr	r3, [pc, #184]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2d      	ldr	r2, [pc, #180]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a80:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a2a      	ldr	r2, [pc, #168]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8c:	f7ff f932 	bl	8000cf4 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f92e 	bl	8000cf4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e058      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab2:	e050      	b.n	8001b56 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e04f      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d148      	bne.n	8001b56 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001adc:	f7ff f90a 	bl	8000cf4 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f906 	bl	8000cf4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e030      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x734>
 8001b02:	e028      	b.n	8001b56 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d023      	beq.n	8001b52 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_RCC_OscConfig+0x780>)
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f8ed 	bl	8000cf4 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1c:	e00c      	b.n	8001b38 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f8e9 	bl	8000cf4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d905      	bls.n	8001b38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e013      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_RCC_OscConfig+0x7b0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ec      	bne.n	8001b1e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_RCC_OscConfig+0x7b0>)
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4905      	ldr	r1, [pc, #20]	@ (8001b60 <HAL_RCC_OscConfig+0x7b0>)
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_RCC_OscConfig+0x7b4>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60cb      	str	r3, [r1, #12]
 8001b50:	e001      	b.n	8001b56 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3720      	adds	r7, #32
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	feeefffc 	.word	0xfeeefffc

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0e7      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b75      	ldr	r3, [pc, #468]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b72      	ldr	r3, [pc, #456]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4970      	ldr	r1, [pc, #448]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0cf      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d908      	bls.n	8001bda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b63      	ldr	r3, [pc, #396]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4960      	ldr	r1, [pc, #384]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d04c      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b5a      	ldr	r3, [pc, #360]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d121      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0a6      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	4b54      	ldr	r3, [pc, #336]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e09a      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e08e      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e086      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b46      	ldr	r3, [pc, #280]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4943      	ldr	r1, [pc, #268]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c50:	f7ff f850 	bl	8000cf4 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff f84c 	bl	8000cf4 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e06e      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d208      	bcs.n	8001cae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	492b      	ldr	r1, [pc, #172]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cae:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d210      	bcs.n	8001cde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 0207 	bic.w	r2, r3, #7
 8001cc4:	4923      	ldr	r1, [pc, #140]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ccc:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e036      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	4918      	ldr	r1, [pc, #96]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4910      	ldr	r1, [pc, #64]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1c:	f000 f824 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	490b      	ldr	r1, [pc, #44]	@ (8001d5c <HAL_RCC_ClockConfig+0x1f4>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	4a09      	ldr	r2, [pc, #36]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d3c:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ff87 	bl	8000c54 <HAL_InitTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08005e74 	.word	0x08005e74
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b3e      	ldr	r3, [pc, #248]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d80:	4b3b      	ldr	r3, [pc, #236]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x34>
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d11e      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d9c:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da8:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de0:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	e004      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dec:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d134      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d003      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0xac>
 8001e0c:	e005      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e10:	617b      	str	r3, [r7, #20]
      break;
 8001e12:	e005      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e16:	617b      	str	r3, [r7, #20]
      break;
 8001e18:	e002      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	617b      	str	r3, [r7, #20]
      break;
 8001e1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	fb03 f202 	mul.w	r2, r3, r2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	0e5b      	lsrs	r3, r3, #25
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	3301      	adds	r3, #1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e60:	69bb      	ldr	r3, [r7, #24]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08005e8c 	.word	0x08005e8c
 8001e78:	00f42400 	.word	0x00f42400
 8001e7c:	007a1200 	.word	0x007a1200

08001e80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000

08001e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e9c:	f7ff fff0 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4904      	ldr	r1, [pc, #16]	@ (8001ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08005e84 	.word	0x08005e84

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec8:	f7ff ffda 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4904      	ldr	r1, [pc, #16]	@ (8001eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08005e84 	.word	0x08005e84

08001ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001efc:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f08:	f7ff f9ee 	bl	80012e8 <HAL_PWREx_GetVoltageRange>
 8001f0c:	6178      	str	r0, [r7, #20]
 8001f0e:	e014      	b.n	8001f3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	4a24      	ldr	r2, [pc, #144]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1c:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f28:	f7ff f9de 	bl	80012e8 <HAL_PWREx_GetVoltageRange>
 8001f2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f40:	d10b      	bne.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b80      	cmp	r3, #128	@ 0x80
 8001f46:	d919      	bls.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f4c:	d902      	bls.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4e:	2302      	movs	r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e013      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e010      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	@ 0x80
 8001f5e:	d902      	bls.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e00a      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b80      	cmp	r3, #128	@ 0x80
 8001f6a:	d102      	bne.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e004      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b70      	cmp	r3, #112	@ 0x70
 8001f76:	d101      	bne.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f78:	2301      	movs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 0207 	bic.w	r2, r3, #7
 8001f84:	4909      	ldr	r1, [pc, #36]	@ (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f8c:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d041      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fd4:	d02a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fda:	d824      	bhi.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fe6:	d81e      	bhi.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ff0:	d010      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ff2:	e018      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff4:	4b86      	ldr	r3, [pc, #536]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a85      	ldr	r2, [pc, #532]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002000:	e015      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fabb 	bl	8002584 <RCCEx_PLLSAI1_Config>
 800200e:	4603      	mov	r3, r0
 8002010:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002012:	e00c      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3320      	adds	r3, #32
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fba6 	bl	800276c <RCCEx_PLLSAI2_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002024:	e003      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	74fb      	strb	r3, [r7, #19]
      break;
 800202a:	e000      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800202c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10b      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002034:	4b76      	ldr	r3, [pc, #472]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002042:	4973      	ldr	r1, [pc, #460]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800204a:	e001      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d041      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002060:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002064:	d02a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002066:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800206a:	d824      	bhi.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800206c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002070:	d008      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002076:	d81e      	bhi.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d010      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002082:	e018      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002084:	4b62      	ldr	r3, [pc, #392]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a61      	ldr	r2, [pc, #388]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002090:	e015      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fa73 	bl	8002584 <RCCEx_PLLSAI1_Config>
 800209e:	4603      	mov	r3, r0
 80020a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a2:	e00c      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3320      	adds	r3, #32
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fb5e 	bl	800276c <RCCEx_PLLSAI2_Config>
 80020b0:	4603      	mov	r3, r0
 80020b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b4:	e003      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	74fb      	strb	r3, [r7, #19]
      break;
 80020ba:	e000      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10b      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020c4:	4b52      	ldr	r3, [pc, #328]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020d2:	494f      	ldr	r1, [pc, #316]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020da:	e001      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a0 	beq.w	800222e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020f2:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002102:	2300      	movs	r3, #0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	4b41      	ldr	r3, [pc, #260]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	4a40      	ldr	r2, [pc, #256]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	@ 0x58
 8002114:	4b3e      	ldr	r3, [pc, #248]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002120:	2301      	movs	r3, #1
 8002122:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002124:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a3a      	ldr	r2, [pc, #232]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002130:	f7fe fde0 	bl	8000cf4 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002136:	e009      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7fe fddc 	bl	8000cf4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d902      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	74fb      	strb	r3, [r7, #19]
        break;
 800214a:	e005      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800214c:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ef      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d15c      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215e:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002168:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01f      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	429a      	cmp	r2, r3
 800217a:	d019      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800217c:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002186:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002188:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218e:	4a20      	ldr	r2, [pc, #128]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002198:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219e:	4a1c      	ldr	r2, [pc, #112]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7fe fd9b 	bl	8000cf4 <HAL_GetTick>
 80021be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c0:	e00b      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe fd97 	bl	8000cf4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d902      	bls.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	74fb      	strb	r3, [r7, #19]
            break;
 80021d8:	e006      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ec      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fe:	4904      	ldr	r1, [pc, #16]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002206:	e009      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
 800220c:	e006      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221c:	7c7b      	ldrb	r3, [r7, #17]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b9e      	ldr	r3, [pc, #632]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	4a9d      	ldr	r2, [pc, #628]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800223a:	4b98      	ldr	r3, [pc, #608]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002240:	f023 0203 	bic.w	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002248:	4994      	ldr	r1, [pc, #592]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800225c:	4b8f      	ldr	r3, [pc, #572]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f023 020c 	bic.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226a:	498c      	ldr	r1, [pc, #560]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800227e:	4b87      	ldr	r3, [pc, #540]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002284:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	4983      	ldr	r1, [pc, #524]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022a0:	4b7e      	ldr	r3, [pc, #504]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	497b      	ldr	r1, [pc, #492]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022c2:	4b76      	ldr	r3, [pc, #472]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d0:	4972      	ldr	r1, [pc, #456]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e4:	4b6d      	ldr	r3, [pc, #436]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	496a      	ldr	r1, [pc, #424]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002306:	4b65      	ldr	r3, [pc, #404]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	4961      	ldr	r1, [pc, #388]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002328:	4b5c      	ldr	r3, [pc, #368]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002336:	4959      	ldr	r1, [pc, #356]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234a:	4b54      	ldr	r3, [pc, #336]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002350:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002358:	4950      	ldr	r1, [pc, #320]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800236c:	4b4b      	ldr	r3, [pc, #300]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	4948      	ldr	r1, [pc, #288]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238e:	4b43      	ldr	r3, [pc, #268]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002394:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239c:	493f      	ldr	r1, [pc, #252]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d028      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b0:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023be:	4937      	ldr	r1, [pc, #220]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ce:	d106      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d0:	4b32      	ldr	r3, [pc, #200]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a31      	ldr	r2, [pc, #196]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023da:	60d3      	str	r3, [r2, #12]
 80023dc:	e011      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e6:	d10c      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	2101      	movs	r1, #1
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f8c8 	bl	8002584 <RCCEx_PLLSAI1_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023fe:	7cfb      	ldrb	r3, [r7, #19]
 8002400:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d028      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240e:	4b23      	ldr	r3, [pc, #140]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002414:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	491f      	ldr	r1, [pc, #124]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800242c:	d106      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a1a      	ldr	r2, [pc, #104]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002438:	60d3      	str	r3, [r2, #12]
 800243a:	e011      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002444:	d10c      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f899 	bl	8002584 <RCCEx_PLLSAI1_Config>
 8002452:	4603      	mov	r3, r0
 8002454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02b      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247a:	4908      	ldr	r1, [pc, #32]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800248a:	d109      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a02      	ldr	r2, [pc, #8]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002496:	60d3      	str	r3, [r2, #12]
 8002498:	e014      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2101      	movs	r1, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f867 	bl	8002584 <RCCEx_PLLSAI1_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d02f      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024de:	4928      	ldr	r1, [pc, #160]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024ee:	d10d      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	2102      	movs	r1, #2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f844 	bl	8002584 <RCCEx_PLLSAI1_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d014      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	74bb      	strb	r3, [r7, #18]
 800250a:	e011      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002514:	d10c      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3320      	adds	r3, #32
 800251a:	2102      	movs	r1, #2
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f925 	bl	800276c <RCCEx_PLLSAI2_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800253c:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800254a:	490d      	ldr	r1, [pc, #52]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800256e:	4904      	ldr	r1, [pc, #16]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002576:	7cbb      	ldrb	r3, [r7, #18]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000

08002584 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002592:	4b75      	ldr	r3, [pc, #468]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d018      	beq.n	80025d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800259e:	4b72      	ldr	r3, [pc, #456]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d10d      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
       ||
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
       ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d047      	beq.n	800265a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e044      	b.n	800265a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d018      	beq.n	800260a <RCCEx_PLLSAI1_Config+0x86>
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d825      	bhi.n	8002628 <RCCEx_PLLSAI1_Config+0xa4>
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d002      	beq.n	80025e6 <RCCEx_PLLSAI1_Config+0x62>
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d009      	beq.n	80025f8 <RCCEx_PLLSAI1_Config+0x74>
 80025e4:	e020      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025e6:	4b60      	ldr	r3, [pc, #384]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11d      	bne.n	800262e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f6:	e01a      	b.n	800262e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d116      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002608:	e013      	b.n	8002632 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800260a:	4b57      	ldr	r3, [pc, #348]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002616:	4b54      	ldr	r3, [pc, #336]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002626:	e006      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	e004      	b.n	8002638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002636:	bf00      	nop
    }

    if(status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800263e:	4b4a      	ldr	r3, [pc, #296]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	430b      	orrs	r3, r1
 8002654:	4944      	ldr	r1, [pc, #272]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d17d      	bne.n	800275c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002660:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a40      	ldr	r2, [pc, #256]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002666:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800266a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800266c:	f7fe fb42 	bl	8000cf4 <HAL_GetTick>
 8002670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002672:	e009      	b.n	8002688 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002674:	f7fe fb3e 	bl	8000cf4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	73fb      	strb	r3, [r7, #15]
        break;
 8002686:	e005      	b.n	8002694 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002688:	4b37      	ldr	r3, [pc, #220]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ef      	bne.n	8002674 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d160      	bne.n	800275c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a0:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6892      	ldr	r2, [r2, #8]
 80026b0:	0211      	lsls	r1, r2, #8
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	0912      	lsrs	r2, r2, #4
 80026b8:	0452      	lsls	r2, r2, #17
 80026ba:	430a      	orrs	r2, r1
 80026bc:	492a      	ldr	r1, [pc, #168]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	610b      	str	r3, [r1, #16]
 80026c2:	e027      	b.n	8002714 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d112      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ca:	4b27      	ldr	r3, [pc, #156]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	0211      	lsls	r1, r2, #8
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6912      	ldr	r2, [r2, #16]
 80026e0:	0852      	lsrs	r2, r2, #1
 80026e2:	3a01      	subs	r2, #1
 80026e4:	0552      	lsls	r2, r2, #21
 80026e6:	430a      	orrs	r2, r1
 80026e8:	491f      	ldr	r1, [pc, #124]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	610b      	str	r3, [r1, #16]
 80026ee:	e011      	b.n	8002714 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6892      	ldr	r2, [r2, #8]
 8002700:	0211      	lsls	r1, r2, #8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6952      	ldr	r2, [r2, #20]
 8002706:	0852      	lsrs	r2, r2, #1
 8002708:	3a01      	subs	r2, #1
 800270a:	0652      	lsls	r2, r2, #25
 800270c:	430a      	orrs	r2, r1
 800270e:	4916      	ldr	r1, [pc, #88]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800271e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fae8 	bl	8000cf4 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002728:	f7fe fae4 	bl	8000cf4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
          break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ef      	beq.n	8002728 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	4904      	ldr	r1, [pc, #16]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000

0800276c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800277a:	4b6a      	ldr	r3, [pc, #424]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002786:	4b67      	ldr	r3, [pc, #412]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0203 	and.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d10d      	bne.n	80027b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
       ||
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800279e:	4b61      	ldr	r3, [pc, #388]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
       ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d047      	beq.n	8002842 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e044      	b.n	8002842 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d018      	beq.n	80027f2 <RCCEx_PLLSAI2_Config+0x86>
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d825      	bhi.n	8002810 <RCCEx_PLLSAI2_Config+0xa4>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <RCCEx_PLLSAI2_Config+0x62>
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d009      	beq.n	80027e0 <RCCEx_PLLSAI2_Config+0x74>
 80027cc:	e020      	b.n	8002810 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ce:	4b55      	ldr	r3, [pc, #340]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11d      	bne.n	8002816 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027de:	e01a      	b.n	8002816 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e0:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d116      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e013      	b.n	800281a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027fe:	4b49      	ldr	r3, [pc, #292]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800280e:	e006      	b.n	800281e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e004      	b.n	8002820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002826:	4b3f      	ldr	r3, [pc, #252]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	430b      	orrs	r3, r1
 800283c:	4939      	ldr	r1, [pc, #228]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d167      	bne.n	8002918 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002848:	4b36      	ldr	r3, [pc, #216]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a35      	ldr	r2, [pc, #212]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fa4e 	bl	8000cf4 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800285a:	e009      	b.n	8002870 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800285c:	f7fe fa4a 	bl	8000cf4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d902      	bls.n	8002870 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	73fb      	strb	r3, [r7, #15]
        break;
 800286e:	e005      	b.n	800287c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002870:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ef      	bne.n	800285c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d14a      	bne.n	8002918 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002888:	4b26      	ldr	r3, [pc, #152]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
 8002898:	0211      	lsls	r1, r2, #8
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68d2      	ldr	r2, [r2, #12]
 800289e:	0912      	lsrs	r2, r2, #4
 80028a0:	0452      	lsls	r2, r2, #17
 80028a2:	430a      	orrs	r2, r1
 80028a4:	491f      	ldr	r1, [pc, #124]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	614b      	str	r3, [r1, #20]
 80028aa:	e011      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6892      	ldr	r2, [r2, #8]
 80028bc:	0211      	lsls	r1, r2, #8
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6912      	ldr	r2, [r2, #16]
 80028c2:	0852      	lsrs	r2, r2, #1
 80028c4:	3a01      	subs	r2, #1
 80028c6:	0652      	lsls	r2, r2, #25
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4916      	ldr	r1, [pc, #88]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028d0:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fa0a 	bl	8000cf4 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028e2:	e009      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028e4:	f7fe fa06 	bl	8000cf4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d902      	bls.n	80028f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]
          break;
 80028f6:	e005      	b.n	8002904 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ef      	beq.n	80028e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4904      	ldr	r1, [pc, #16]	@ (8002924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e049      	b.n	80029ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe f82e 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 fd26 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04f      	b.n	8002a90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1a:	d018      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_TIM_Base_Start_IT+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	@ (8002ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d115      	bne.n	8002a7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d015      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a66:	d011      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	e008      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e000      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40013400 	.word	0x40013400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	00010007 	.word	0x00010007

08002ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e049      	b.n	8002b5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f841 	bl	8002b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f000 fc5e 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_TIM_PWM_Start+0x24>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e03c      	b.n	8002c1a <HAL_TIM_PWM_Start+0x9e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d109      	bne.n	8002bba <HAL_TIM_PWM_Start+0x3e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e02f      	b.n	8002c1a <HAL_TIM_PWM_Start+0x9e>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d109      	bne.n	8002bd4 <HAL_TIM_PWM_Start+0x58>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e022      	b.n	8002c1a <HAL_TIM_PWM_Start+0x9e>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d109      	bne.n	8002bee <HAL_TIM_PWM_Start+0x72>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e015      	b.n	8002c1a <HAL_TIM_PWM_Start+0x9e>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d109      	bne.n	8002c08 <HAL_TIM_PWM_Start+0x8c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e008      	b.n	8002c1a <HAL_TIM_PWM_Start+0x9e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e09c      	b.n	8002d5c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xb6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c30:	e023      	b.n	8002c7a <HAL_TIM_PWM_Start+0xfe>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xc6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c40:	e01b      	b.n	8002c7a <HAL_TIM_PWM_Start+0xfe>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start+0xd6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c50:	e013      	b.n	8002c7a <HAL_TIM_PWM_Start+0xfe>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0xe6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c60:	e00b      	b.n	8002c7a <HAL_TIM_PWM_Start+0xfe>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0xf6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c70:	e003      	b.n	8002c7a <HAL_TIM_PWM_Start+0xfe>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 ffae 	bl	8003be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a35      	ldr	r2, [pc, #212]	@ (8002d64 <HAL_TIM_PWM_Start+0x1e8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_TIM_PWM_Start+0x13e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a34      	ldr	r2, [pc, #208]	@ (8002d68 <HAL_TIM_PWM_Start+0x1ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_TIM_PWM_Start+0x13e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a32      	ldr	r2, [pc, #200]	@ (8002d6c <HAL_TIM_PWM_Start+0x1f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_TIM_PWM_Start+0x13e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a31      	ldr	r2, [pc, #196]	@ (8002d70 <HAL_TIM_PWM_Start+0x1f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIM_PWM_Start+0x13e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d74 <HAL_TIM_PWM_Start+0x1f8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_PWM_Start+0x142>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_TIM_PWM_Start+0x144>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	@ (8002d64 <HAL_TIM_PWM_Start+0x1e8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01d      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x19e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce6:	d018      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x19e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a22      	ldr	r2, [pc, #136]	@ (8002d78 <HAL_TIM_PWM_Start+0x1fc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x19e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	@ (8002d7c <HAL_TIM_PWM_Start+0x200>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00e      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x19e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	@ (8002d80 <HAL_TIM_PWM_Start+0x204>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x19e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a17      	ldr	r2, [pc, #92]	@ (8002d68 <HAL_TIM_PWM_Start+0x1ec>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x19e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a15      	ldr	r2, [pc, #84]	@ (8002d6c <HAL_TIM_PWM_Start+0x1f0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d115      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <HAL_TIM_PWM_Start+0x208>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d015      	beq.n	8002d58 <HAL_TIM_PWM_Start+0x1dc>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d32:	d011      	beq.n	8002d58 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d44:	e008      	b.n	8002d58 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40013400 	.word	0x40013400
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	00010007 	.word	0x00010007

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d020      	beq.n	8002dec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0202 	mvn.w	r2, #2
 8002dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fad1 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fac3 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fad4 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d020      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 faab 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa9d 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 faae 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d020      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01b      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0208 	mvn.w	r2, #8
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa85 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa77 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa88 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0210 	mvn.w	r2, #16
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa5f 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa51 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fa62 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0201 	mvn.w	r2, #1
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fa2f 	bl	8003352 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f001 f851 	bl	8003fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 f849 	bl	8003fd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00c      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fa1c 	bl	80033a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00c      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f06f 0220 	mvn.w	r2, #32
 8002f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f001 f811 	bl	8003fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0ff      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b14      	cmp	r3, #20
 8002fc2:	f200 80f0 	bhi.w	80031a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	080031a7 	.word	0x080031a7
 8002fd4:	080031a7 	.word	0x080031a7
 8002fd8:	080031a7 	.word	0x080031a7
 8002fdc:	08003061 	.word	0x08003061
 8002fe0:	080031a7 	.word	0x080031a7
 8002fe4:	080031a7 	.word	0x080031a7
 8002fe8:	080031a7 	.word	0x080031a7
 8002fec:	080030a3 	.word	0x080030a3
 8002ff0:	080031a7 	.word	0x080031a7
 8002ff4:	080031a7 	.word	0x080031a7
 8002ff8:	080031a7 	.word	0x080031a7
 8002ffc:	080030e3 	.word	0x080030e3
 8003000:	080031a7 	.word	0x080031a7
 8003004:	080031a7 	.word	0x080031a7
 8003008:	080031a7 	.word	0x080031a7
 800300c:	08003125 	.word	0x08003125
 8003010:	080031a7 	.word	0x080031a7
 8003014:	080031a7 	.word	0x080031a7
 8003018:	080031a7 	.word	0x080031a7
 800301c:	08003165 	.word	0x08003165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fa6c 	bl	8003504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0208 	orr.w	r2, r2, #8
 800303a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6999      	ldr	r1, [r3, #24]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	619a      	str	r2, [r3, #24]
      break;
 800305e:	e0a5      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fadc 	bl	8003624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800307a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6999      	ldr	r1, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	619a      	str	r2, [r3, #24]
      break;
 80030a0:	e084      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fb45 	bl	8003738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0208 	orr.w	r2, r2, #8
 80030bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0204 	bic.w	r2, r2, #4
 80030cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69d9      	ldr	r1, [r3, #28]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
      break;
 80030e0:	e064      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fbad 	bl	8003848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800310c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69d9      	ldr	r1, [r3, #28]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	61da      	str	r2, [r3, #28]
      break;
 8003122:	e043      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fbf6 	bl	800391c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0208 	orr.w	r2, r2, #8
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003162:	e023      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fc3a 	bl	80039e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800317e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	021a      	lsls	r2, r3, #8
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031a4:	e002      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
      break;
 80031aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop

080031c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIM_ConfigClockSource+0x1c>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0b6      	b.n	800334a <HAL_TIM_ConfigClockSource+0x18a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003218:	d03e      	beq.n	8003298 <HAL_TIM_ConfigClockSource+0xd8>
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	f200 8087 	bhi.w	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003226:	f000 8086 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x176>
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322e:	d87f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003230:	2b70      	cmp	r3, #112	@ 0x70
 8003232:	d01a      	beq.n	800326a <HAL_TIM_ConfigClockSource+0xaa>
 8003234:	2b70      	cmp	r3, #112	@ 0x70
 8003236:	d87b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003238:	2b60      	cmp	r3, #96	@ 0x60
 800323a:	d050      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x11e>
 800323c:	2b60      	cmp	r3, #96	@ 0x60
 800323e:	d877      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003240:	2b50      	cmp	r3, #80	@ 0x50
 8003242:	d03c      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xfe>
 8003244:	2b50      	cmp	r3, #80	@ 0x50
 8003246:	d873      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003248:	2b40      	cmp	r3, #64	@ 0x40
 800324a:	d058      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x13e>
 800324c:	2b40      	cmp	r3, #64	@ 0x40
 800324e:	d86f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003250:	2b30      	cmp	r3, #48	@ 0x30
 8003252:	d064      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 8003254:	2b30      	cmp	r3, #48	@ 0x30
 8003256:	d86b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003258:	2b20      	cmp	r3, #32
 800325a:	d060      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d867      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05c      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 8003264:	2b10      	cmp	r3, #16
 8003266:	d05a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 8003268:	e062      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	f000 fc93 	bl	8003ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800328c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
      break;
 8003296:	e04f      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032a8:	f000 fc7c 	bl	8003ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e03c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 fbf0 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2150      	movs	r1, #80	@ 0x50
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fc49 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 80032dc:	e02c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 fc0f 	bl	8003b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2160      	movs	r1, #96	@ 0x60
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fc39 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 80032fc:	e01c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	461a      	mov	r2, r3
 800330c:	f000 fbd0 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2140      	movs	r1, #64	@ 0x40
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fc29 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 800331c:	e00c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f000 fc20 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 800332e:	e003      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      break;
 8003334:	e000      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <TIM_Base_SetConfig+0x12c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d00f      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a43      	ldr	r2, [pc, #268]	@ (80034e8 <TIM_Base_SetConfig+0x130>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <TIM_Base_SetConfig+0x134>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a41      	ldr	r2, [pc, #260]	@ (80034f0 <TIM_Base_SetConfig+0x138>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a40      	ldr	r2, [pc, #256]	@ (80034f4 <TIM_Base_SetConfig+0x13c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d108      	bne.n	800340a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a35      	ldr	r2, [pc, #212]	@ (80034e4 <TIM_Base_SetConfig+0x12c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01f      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d01b      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a32      	ldr	r2, [pc, #200]	@ (80034e8 <TIM_Base_SetConfig+0x130>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d017      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a31      	ldr	r2, [pc, #196]	@ (80034ec <TIM_Base_SetConfig+0x134>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a30      	ldr	r2, [pc, #192]	@ (80034f0 <TIM_Base_SetConfig+0x138>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00f      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2f      	ldr	r2, [pc, #188]	@ (80034f4 <TIM_Base_SetConfig+0x13c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00b      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2e      	ldr	r2, [pc, #184]	@ (80034f8 <TIM_Base_SetConfig+0x140>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2d      	ldr	r2, [pc, #180]	@ (80034fc <TIM_Base_SetConfig+0x144>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_Base_SetConfig+0x9a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <TIM_Base_SetConfig+0x148>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <TIM_Base_SetConfig+0x12c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00f      	beq.n	80034b0 <TIM_Base_SetConfig+0xf8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <TIM_Base_SetConfig+0x13c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00b      	beq.n	80034b0 <TIM_Base_SetConfig+0xf8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <TIM_Base_SetConfig+0x140>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <TIM_Base_SetConfig+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <TIM_Base_SetConfig+0x144>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0xf8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a15      	ldr	r2, [pc, #84]	@ (8003500 <TIM_Base_SetConfig+0x148>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f023 0201 	bic.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]
  }
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800

08003504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f023 0201 	bic.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0302 	bic.w	r3, r3, #2
 8003550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a2c      	ldr	r2, [pc, #176]	@ (8003610 <TIM_OC1_SetConfig+0x10c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00f      	beq.n	8003584 <TIM_OC1_SetConfig+0x80>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a2b      	ldr	r2, [pc, #172]	@ (8003614 <TIM_OC1_SetConfig+0x110>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00b      	beq.n	8003584 <TIM_OC1_SetConfig+0x80>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a2a      	ldr	r2, [pc, #168]	@ (8003618 <TIM_OC1_SetConfig+0x114>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <TIM_OC1_SetConfig+0x80>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a29      	ldr	r2, [pc, #164]	@ (800361c <TIM_OC1_SetConfig+0x118>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_OC1_SetConfig+0x80>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a28      	ldr	r2, [pc, #160]	@ (8003620 <TIM_OC1_SetConfig+0x11c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d10c      	bne.n	800359e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0308 	bic.w	r3, r3, #8
 800358a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <TIM_OC1_SetConfig+0x10c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_OC1_SetConfig+0xc2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003614 <TIM_OC1_SetConfig+0x110>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_OC1_SetConfig+0xc2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a19      	ldr	r2, [pc, #100]	@ (8003618 <TIM_OC1_SetConfig+0x114>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_OC1_SetConfig+0xc2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <TIM_OC1_SetConfig+0x118>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_OC1_SetConfig+0xc2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a17      	ldr	r2, [pc, #92]	@ (8003620 <TIM_OC1_SetConfig+0x11c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d111      	bne.n	80035ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	621a      	str	r2, [r3, #32]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40013400 	.word	0x40013400
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 0210 	bic.w	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0320 	bic.w	r3, r3, #32
 8003672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a28      	ldr	r2, [pc, #160]	@ (8003724 <TIM_OC2_SetConfig+0x100>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_OC2_SetConfig+0x6c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a27      	ldr	r2, [pc, #156]	@ (8003728 <TIM_OC2_SetConfig+0x104>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10d      	bne.n	80036ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <TIM_OC2_SetConfig+0x100>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00f      	beq.n	80036d4 <TIM_OC2_SetConfig+0xb0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <TIM_OC2_SetConfig+0x104>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <TIM_OC2_SetConfig+0xb0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <TIM_OC2_SetConfig+0x108>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_OC2_SetConfig+0xb0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003730 <TIM_OC2_SetConfig+0x10c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC2_SetConfig+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a19      	ldr	r2, [pc, #100]	@ (8003734 <TIM_OC2_SetConfig+0x110>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d113      	bne.n	80036fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40013400 	.word	0x40013400
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800

08003738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a27      	ldr	r2, [pc, #156]	@ (8003834 <TIM_OC3_SetConfig+0xfc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_OC3_SetConfig+0x6a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a26      	ldr	r2, [pc, #152]	@ (8003838 <TIM_OC3_SetConfig+0x100>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10d      	bne.n	80037be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <TIM_OC3_SetConfig+0xfc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00f      	beq.n	80037e6 <TIM_OC3_SetConfig+0xae>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <TIM_OC3_SetConfig+0x100>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <TIM_OC3_SetConfig+0xae>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	@ (800383c <TIM_OC3_SetConfig+0x104>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_OC3_SetConfig+0xae>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a19      	ldr	r2, [pc, #100]	@ (8003840 <TIM_OC3_SetConfig+0x108>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_OC3_SetConfig+0xae>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a18      	ldr	r2, [pc, #96]	@ (8003844 <TIM_OC3_SetConfig+0x10c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d113      	bne.n	800380e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40013400 	.word	0x40013400
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800

08003848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800387a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	031b      	lsls	r3, r3, #12
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <TIM_OC4_SetConfig+0xc0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00f      	beq.n	80038cc <TIM_OC4_SetConfig+0x84>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a17      	ldr	r2, [pc, #92]	@ (800390c <TIM_OC4_SetConfig+0xc4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00b      	beq.n	80038cc <TIM_OC4_SetConfig+0x84>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <TIM_OC4_SetConfig+0xc8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d007      	beq.n	80038cc <TIM_OC4_SetConfig+0x84>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <TIM_OC4_SetConfig+0xcc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_OC4_SetConfig+0x84>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a14      	ldr	r2, [pc, #80]	@ (8003918 <TIM_OC4_SetConfig+0xd0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d109      	bne.n	80038e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40013400 	.word	0x40013400
 8003910:	40014000 	.word	0x40014000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <TIM_OC5_SetConfig+0xb4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00f      	beq.n	8003996 <TIM_OC5_SetConfig+0x7a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a16      	ldr	r2, [pc, #88]	@ (80039d4 <TIM_OC5_SetConfig+0xb8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00b      	beq.n	8003996 <TIM_OC5_SetConfig+0x7a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <TIM_OC5_SetConfig+0xbc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <TIM_OC5_SetConfig+0x7a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a14      	ldr	r2, [pc, #80]	@ (80039dc <TIM_OC5_SetConfig+0xc0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_OC5_SetConfig+0x7a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <TIM_OC5_SetConfig+0xc4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d109      	bne.n	80039aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	621a      	str	r2, [r3, #32]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40013400 	.word	0x40013400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800

080039e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	051b      	lsls	r3, r3, #20
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <TIM_OC6_SetConfig+0xb8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00f      	beq.n	8003a60 <TIM_OC6_SetConfig+0x7c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a17      	ldr	r2, [pc, #92]	@ (8003aa0 <TIM_OC6_SetConfig+0xbc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_OC6_SetConfig+0x7c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	@ (8003aa4 <TIM_OC6_SetConfig+0xc0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC6_SetConfig+0x7c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <TIM_OC6_SetConfig+0xc4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC6_SetConfig+0x7c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <TIM_OC6_SetConfig+0xc8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d109      	bne.n	8003a74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40013400 	.word	0x40013400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800

08003ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f023 030a 	bic.w	r3, r3, #10
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b087      	sub	sp, #28
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f023 0210 	bic.w	r2, r3, #16
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f043 0307 	orr.w	r3, r3, #7
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	609a      	str	r2, [r3, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1a      	ldr	r2, [r3, #32]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	401a      	ands	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_TIMEx_PWMN_Start+0x24>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e022      	b.n	8003c9a <HAL_TIMEx_PWMN_Start+0x6a>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d109      	bne.n	8003c6e <HAL_TIMEx_PWMN_Start+0x3e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e015      	b.n	8003c9a <HAL_TIMEx_PWMN_Start+0x6a>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d109      	bne.n	8003c88 <HAL_TIMEx_PWMN_Start+0x58>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e008      	b.n	8003c9a <HAL_TIMEx_PWMN_Start+0x6a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06e      	b.n	8003d80 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIMEx_PWMN_Start+0x82>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb0:	e013      	b.n	8003cda <HAL_TIMEx_PWMN_Start+0xaa>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIMEx_PWMN_Start+0x92>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cc0:	e00b      	b.n	8003cda <HAL_TIMEx_PWMN_Start+0xaa>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIMEx_PWMN_Start+0xa2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cd0:	e003      	b.n	8003cda <HAL_TIMEx_PWMN_Start+0xaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f982 	bl	8003fec <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	@ (8003d88 <HAL_TIMEx_PWMN_Start+0x158>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <HAL_TIMEx_PWMN_Start+0x10e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0a:	d018      	beq.n	8003d3e <HAL_TIMEx_PWMN_Start+0x10e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	@ (8003d8c <HAL_TIMEx_PWMN_Start+0x15c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_TIMEx_PWMN_Start+0x10e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d90 <HAL_TIMEx_PWMN_Start+0x160>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_TIMEx_PWMN_Start+0x10e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1b      	ldr	r2, [pc, #108]	@ (8003d94 <HAL_TIMEx_PWMN_Start+0x164>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_TIMEx_PWMN_Start+0x10e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d98 <HAL_TIMEx_PWMN_Start+0x168>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_TIMEx_PWMN_Start+0x10e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <HAL_TIMEx_PWMN_Start+0x16c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d115      	bne.n	8003d6a <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	4b16      	ldr	r3, [pc, #88]	@ (8003da0 <HAL_TIMEx_PWMN_Start+0x170>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d015      	beq.n	8003d7c <HAL_TIMEx_PWMN_Start+0x14c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d56:	d011      	beq.n	8003d7c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d68:	e008      	b.n	8003d7c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e000      	b.n	8003d7e <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40000c00 	.word	0x40000c00
 8003d98:	40013400 	.word	0x40013400
 8003d9c:	40014000 	.word	0x40014000
 8003da0:	00010007 	.word	0x00010007

08003da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e068      	b.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2e      	ldr	r2, [pc, #184]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d108      	bne.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003df6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2e:	d018      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a13      	ldr	r2, [pc, #76]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a14      	ldr	r2, [pc, #80]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10c      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40000c00 	.word	0x40000c00
 8003eb0:	40014000 	.word	0x40014000

08003eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e065      	b.n	8003f9c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	@ (8003fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d115      	bne.n	8003f8a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	051b      	lsls	r3, r3, #20
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40013400 	.word	0x40013400

08003fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	2204      	movs	r2, #4
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	43db      	mvns	r3, r3
 800400e:	401a      	ands	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e040      	b.n	80040ca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7fc fd55 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2224      	movs	r2, #36	@ 0x24
 8004062:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fae1 	bl	8004644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f826 	bl	80040d4 <UART_SetConfig>
 8004088:	4603      	mov	r3, r0
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e01b      	b.n	80040ca <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb60 	bl	8004788 <UART_CheckIdleState>
 80040c8:	4603      	mov	r3, r0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d8:	b08a      	sub	sp, #40	@ 0x28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4ba4      	ldr	r3, [pc, #656]	@ (8004394 <UART_SetConfig+0x2c0>)
 8004104:	4013      	ands	r3, r2
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800410c:	430b      	orrs	r3, r1
 800410e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a99      	ldr	r2, [pc, #612]	@ (8004398 <UART_SetConfig+0x2c4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413c:	4313      	orrs	r3, r2
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	430a      	orrs	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a90      	ldr	r2, [pc, #576]	@ (800439c <UART_SetConfig+0x2c8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d126      	bne.n	80041ac <UART_SetConfig+0xd8>
 800415e:	4b90      	ldr	r3, [pc, #576]	@ (80043a0 <UART_SetConfig+0x2cc>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b03      	cmp	r3, #3
 800416a:	d81b      	bhi.n	80041a4 <UART_SetConfig+0xd0>
 800416c:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <UART_SetConfig+0xa0>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004185 	.word	0x08004185
 8004178:	08004195 	.word	0x08004195
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800419d 	.word	0x0800419d
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418a:	e116      	b.n	80043ba <UART_SetConfig+0x2e6>
 800418c:	2302      	movs	r3, #2
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e112      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800419a:	e10e      	b.n	80043ba <UART_SetConfig+0x2e6>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a2:	e10a      	b.n	80043ba <UART_SetConfig+0x2e6>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041aa:	e106      	b.n	80043ba <UART_SetConfig+0x2e6>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a7c      	ldr	r2, [pc, #496]	@ (80043a4 <UART_SetConfig+0x2d0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d138      	bne.n	8004228 <UART_SetConfig+0x154>
 80041b6:	4b7a      	ldr	r3, [pc, #488]	@ (80043a0 <UART_SetConfig+0x2cc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d82d      	bhi.n	8004220 <UART_SetConfig+0x14c>
 80041c4:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <UART_SetConfig+0xf8>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004221 	.word	0x08004221
 80041d4:	08004221 	.word	0x08004221
 80041d8:	08004221 	.word	0x08004221
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004221 	.word	0x08004221
 80041e4:	08004221 	.word	0x08004221
 80041e8:	08004221 	.word	0x08004221
 80041ec:	08004209 	.word	0x08004209
 80041f0:	08004221 	.word	0x08004221
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004219 	.word	0x08004219
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004206:	e0d8      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004208:	2302      	movs	r3, #2
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420e:	e0d4      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004210:	2304      	movs	r3, #4
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e0d0      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004218:	2308      	movs	r3, #8
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e0cc      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004220:	2310      	movs	r3, #16
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e0c8      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5e      	ldr	r2, [pc, #376]	@ (80043a8 <UART_SetConfig+0x2d4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d125      	bne.n	800427e <UART_SetConfig+0x1aa>
 8004232:	4b5b      	ldr	r3, [pc, #364]	@ (80043a0 <UART_SetConfig+0x2cc>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800423c:	2b30      	cmp	r3, #48	@ 0x30
 800423e:	d016      	beq.n	800426e <UART_SetConfig+0x19a>
 8004240:	2b30      	cmp	r3, #48	@ 0x30
 8004242:	d818      	bhi.n	8004276 <UART_SetConfig+0x1a2>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d00a      	beq.n	800425e <UART_SetConfig+0x18a>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d814      	bhi.n	8004276 <UART_SetConfig+0x1a2>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <UART_SetConfig+0x182>
 8004250:	2b10      	cmp	r3, #16
 8004252:	d008      	beq.n	8004266 <UART_SetConfig+0x192>
 8004254:	e00f      	b.n	8004276 <UART_SetConfig+0x1a2>
 8004256:	2300      	movs	r3, #0
 8004258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425c:	e0ad      	b.n	80043ba <UART_SetConfig+0x2e6>
 800425e:	2302      	movs	r3, #2
 8004260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004264:	e0a9      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004266:	2304      	movs	r3, #4
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426c:	e0a5      	b.n	80043ba <UART_SetConfig+0x2e6>
 800426e:	2308      	movs	r3, #8
 8004270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004274:	e0a1      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004276:	2310      	movs	r3, #16
 8004278:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427c:	e09d      	b.n	80043ba <UART_SetConfig+0x2e6>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a4a      	ldr	r2, [pc, #296]	@ (80043ac <UART_SetConfig+0x2d8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d125      	bne.n	80042d4 <UART_SetConfig+0x200>
 8004288:	4b45      	ldr	r3, [pc, #276]	@ (80043a0 <UART_SetConfig+0x2cc>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004292:	2bc0      	cmp	r3, #192	@ 0xc0
 8004294:	d016      	beq.n	80042c4 <UART_SetConfig+0x1f0>
 8004296:	2bc0      	cmp	r3, #192	@ 0xc0
 8004298:	d818      	bhi.n	80042cc <UART_SetConfig+0x1f8>
 800429a:	2b80      	cmp	r3, #128	@ 0x80
 800429c:	d00a      	beq.n	80042b4 <UART_SetConfig+0x1e0>
 800429e:	2b80      	cmp	r3, #128	@ 0x80
 80042a0:	d814      	bhi.n	80042cc <UART_SetConfig+0x1f8>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <UART_SetConfig+0x1d8>
 80042a6:	2b40      	cmp	r3, #64	@ 0x40
 80042a8:	d008      	beq.n	80042bc <UART_SetConfig+0x1e8>
 80042aa:	e00f      	b.n	80042cc <UART_SetConfig+0x1f8>
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e082      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042b4:	2302      	movs	r3, #2
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ba:	e07e      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042bc:	2304      	movs	r3, #4
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c2:	e07a      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042c4:	2308      	movs	r3, #8
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ca:	e076      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042cc:	2310      	movs	r3, #16
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d2:	e072      	b.n	80043ba <UART_SetConfig+0x2e6>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a35      	ldr	r2, [pc, #212]	@ (80043b0 <UART_SetConfig+0x2dc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d12a      	bne.n	8004334 <UART_SetConfig+0x260>
 80042de:	4b30      	ldr	r3, [pc, #192]	@ (80043a0 <UART_SetConfig+0x2cc>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ec:	d01a      	beq.n	8004324 <UART_SetConfig+0x250>
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f2:	d81b      	bhi.n	800432c <UART_SetConfig+0x258>
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f8:	d00c      	beq.n	8004314 <UART_SetConfig+0x240>
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fe:	d815      	bhi.n	800432c <UART_SetConfig+0x258>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <UART_SetConfig+0x238>
 8004304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004308:	d008      	beq.n	800431c <UART_SetConfig+0x248>
 800430a:	e00f      	b.n	800432c <UART_SetConfig+0x258>
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e052      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004314:	2302      	movs	r3, #2
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e04e      	b.n	80043ba <UART_SetConfig+0x2e6>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e04a      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e046      	b.n	80043ba <UART_SetConfig+0x2e6>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e042      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <UART_SetConfig+0x2c4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d13a      	bne.n	80043b4 <UART_SetConfig+0x2e0>
 800433e:	4b18      	ldr	r3, [pc, #96]	@ (80043a0 <UART_SetConfig+0x2cc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800434c:	d01a      	beq.n	8004384 <UART_SetConfig+0x2b0>
 800434e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004352:	d81b      	bhi.n	800438c <UART_SetConfig+0x2b8>
 8004354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004358:	d00c      	beq.n	8004374 <UART_SetConfig+0x2a0>
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800435e:	d815      	bhi.n	800438c <UART_SetConfig+0x2b8>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <UART_SetConfig+0x298>
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004368:	d008      	beq.n	800437c <UART_SetConfig+0x2a8>
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x2b8>
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e022      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e01e      	b.n	80043ba <UART_SetConfig+0x2e6>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e01a      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e016      	b.n	80043ba <UART_SetConfig+0x2e6>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e012      	b.n	80043ba <UART_SetConfig+0x2e6>
 8004394:	efff69f3 	.word	0xefff69f3
 8004398:	40008000 	.word	0x40008000
 800439c:	40013800 	.word	0x40013800
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40004400 	.word	0x40004400
 80043a8:	40004800 	.word	0x40004800
 80043ac:	40004c00 	.word	0x40004c00
 80043b0:	40005000 	.word	0x40005000
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a9f      	ldr	r2, [pc, #636]	@ (800463c <UART_SetConfig+0x568>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d17a      	bne.n	80044ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d824      	bhi.n	8004416 <UART_SetConfig+0x342>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <UART_SetConfig+0x300>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004407 	.word	0x08004407
 80043e8:	08004417 	.word	0x08004417
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004417 	.word	0x08004417
 80043f4:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fd fd4e 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 80043fc:	61f8      	str	r0, [r7, #28]
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b8f      	ldr	r3, [pc, #572]	@ (8004640 <UART_SetConfig+0x56c>)
 8004402:	61fb      	str	r3, [r7, #28]
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fd fcaf 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 800440a:	61f8      	str	r0, [r7, #28]
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	61fb      	str	r3, [r7, #28]
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80fb 	beq.w	8004620 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	429a      	cmp	r2, r3
 8004438:	d305      	bcc.n	8004446 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800444c:	e0e8      	b.n	8004620 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2200      	movs	r2, #0
 8004452:	461c      	mov	r4, r3
 8004454:	4615      	mov	r5, r2
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	022b      	lsls	r3, r5, #8
 8004460:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004464:	0222      	lsls	r2, r4, #8
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	6849      	ldr	r1, [r1, #4]
 800446a:	0849      	lsrs	r1, r1, #1
 800446c:	2000      	movs	r0, #0
 800446e:	4688      	mov	r8, r1
 8004470:	4681      	mov	r9, r0
 8004472:	eb12 0a08 	adds.w	sl, r2, r8
 8004476:	eb43 0b09 	adc.w	fp, r3, r9
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004488:	4650      	mov	r0, sl
 800448a:	4659      	mov	r1, fp
 800448c:	f7fb fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800449e:	d308      	bcc.n	80044b2 <UART_SetConfig+0x3de>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044a6:	d204      	bcs.n	80044b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	60da      	str	r2, [r3, #12]
 80044b0:	e0b6      	b.n	8004620 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044b8:	e0b2      	b.n	8004620 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c2:	d15e      	bne.n	8004582 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d828      	bhi.n	800451e <UART_SetConfig+0x44a>
 80044cc:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <UART_SetConfig+0x400>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004509 	.word	0x08004509
 80044e0:	0800451f 	.word	0x0800451f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fd fcce 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 80044fc:	61f8      	str	r0, [r7, #28]
        break;
 80044fe:	e014      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fd fce0 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8004504:	61f8      	str	r0, [r7, #28]
        break;
 8004506:	e010      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b4d      	ldr	r3, [pc, #308]	@ (8004640 <UART_SetConfig+0x56c>)
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e00d      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fd fc2b 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8004512:	61f8      	str	r0, [r7, #28]
        break;
 8004514:	e009      	b.n	800452a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451a:	61fb      	str	r3, [r7, #28]
        break;
 800451c:	e005      	b.n	800452a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d077      	beq.n	8004620 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	005a      	lsls	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0f      	cmp	r3, #15
 800454a:	d916      	bls.n	800457a <UART_SetConfig+0x4a6>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d212      	bcs.n	800457a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f023 030f 	bic.w	r3, r3, #15
 800455c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	b29b      	uxth	r3, r3
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	b29a      	uxth	r2, r3
 800456a:	8afb      	ldrh	r3, [r7, #22]
 800456c:	4313      	orrs	r3, r2
 800456e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	8afa      	ldrh	r2, [r7, #22]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e052      	b.n	8004620 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004580:	e04e      	b.n	8004620 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004582:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004586:	2b08      	cmp	r3, #8
 8004588:	d827      	bhi.n	80045da <UART_SetConfig+0x506>
 800458a:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <UART_SetConfig+0x4bc>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045cb 	.word	0x080045cb
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045db 	.word	0x080045db
 80045ac:	080045db 	.word	0x080045db
 80045b0:	080045d3 	.word	0x080045d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fd fc70 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
        break;
 80045ba:	e014      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7fd fc82 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 80045c0:	61f8      	str	r0, [r7, #28]
        break;
 80045c2:	e010      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004640 <UART_SetConfig+0x56c>)
 80045c6:	61fb      	str	r3, [r7, #28]
        break;
 80045c8:	e00d      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ca:	f7fd fbcd 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 80045ce:	61f8      	str	r0, [r7, #28]
        break;
 80045d0:	e009      	b.n	80045e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d6:	61fb      	str	r3, [r7, #28]
        break;
 80045d8:	e005      	b.n	80045e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045e4:	bf00      	nop
    }

    if (pclk != 0U)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d019      	beq.n	8004620 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	085a      	lsrs	r2, r3, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	441a      	add	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d909      	bls.n	800461a <UART_SetConfig+0x546>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460c:	d205      	bcs.n	800461a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e002      	b.n	8004620 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800462c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	@ 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800463a:	bf00      	nop
 800463c:	40008000 	.word	0x40008000
 8004640:	00f42400 	.word	0x00f42400

08004644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01a      	beq.n	800475a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004742:	d10a      	bne.n	800475a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b098      	sub	sp, #96	@ 0x60
 800478c:	af02      	add	r7, sp, #8
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004798:	f7fc faac 	bl	8000cf4 <HAL_GetTick>
 800479c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d12e      	bne.n	800480a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f88c 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d021      	beq.n	800480a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047da:	653b      	str	r3, [r7, #80]	@ 0x50
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e6      	bne.n	80047c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e062      	b.n	80048d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d149      	bne.n	80048ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004820:	2200      	movs	r2, #0
 8004822:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f856 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d03c      	beq.n	80048ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	623b      	str	r3, [r7, #32]
   return(result);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004850:	633b      	str	r3, [r7, #48]	@ 0x30
 8004852:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60fb      	str	r3, [r7, #12]
   return(result);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004884:	61fa      	str	r2, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	617b      	str	r3, [r7, #20]
   return(result);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e011      	b.n	80048d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3758      	adds	r7, #88	@ 0x58
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	e04f      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d04b      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fc f9ff 	bl	8000cf4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <UART_WaitOnFlagUntilTimeout+0x30>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e04e      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d037      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b80      	cmp	r3, #128	@ 0x80
 800491e:	d034      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b40      	cmp	r3, #64	@ 0x40
 8004924:	d031      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d110      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2208      	movs	r2, #8
 800493a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f838 	bl	80049b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2208      	movs	r2, #8
 8004946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e029      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004964:	d111      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800496e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f81e 	bl	80049b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0a0      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b095      	sub	sp, #84	@ 0x54
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d118      	bne.n	8004a5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0310 	bic.w	r3, r3, #16
 8004a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6979      	ldr	r1, [r7, #20]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	613b      	str	r3, [r7, #16]
   return(result);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e6      	bne.n	8004a28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a6e:	bf00      	nop
 8004a70:	3754      	adds	r7, #84	@ 0x54
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <memset>:
 8004a7a:	4402      	add	r2, r0
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d100      	bne.n	8004a84 <memset+0xa>
 8004a82:	4770      	bx	lr
 8004a84:	f803 1b01 	strb.w	r1, [r3], #1
 8004a88:	e7f9      	b.n	8004a7e <memset+0x4>
	...

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ac4 <__libc_init_array+0x38>)
 8004a90:	4c0d      	ldr	r4, [pc, #52]	@ (8004ac8 <__libc_init_array+0x3c>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	2600      	movs	r6, #0
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8004acc <__libc_init_array+0x40>)
 8004a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ad0 <__libc_init_array+0x44>)
 8004aa0:	f000 f818 	bl	8004ad4 <_init>
 8004aa4:	1b64      	subs	r4, r4, r5
 8004aa6:	10a4      	asrs	r4, r4, #2
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	08005ec4 	.word	0x08005ec4
 8004ac8:	08005ec4 	.word	0x08005ec4
 8004acc:	08005ec4 	.word	0x08005ec4
 8004ad0:	08005ec8 	.word	0x08005ec8

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
